// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.0
// LVGL version: 8.3.6
// Project name: TermometroAereo

#include <esp32_smartdisplay.h>
#include <EEPROM.h>
#include "ui.h"

lv_obj_t * adjustClockMessageBox;
lv_obj_t * resetRuntimeMessageBox;

void updateDisplayBacklight(lv_event_t * e)
{
	smartdisplay_tft_set_backlight((uint16_t) lv_slider_get_value(ui_BacklightSlider));
}

void FuelTankAlertValueChange(lv_event_t * e)
{
	fuelTankChangeAlertMin = lv_dropdown_get_selected(ui_FuelTankChangeAlertDropdown);
	EEPROM.write(0, fuelTankChangeAlertMin);
	EEPROM.commit();
}

void AdjustRtcIsValid(lv_event_t * e)
{
	// If all DateTime Values are set enable Save Button
	if(lv_dropdown_get_selected(ui_DayDropdown) != 0 && lv_dropdown_get_selected(ui_MonthDropdown) != 0
			&& lv_dropdown_get_selected(ui_YearDropdown) != 0 && lv_dropdown_get_selected(ui_HourDropdown) != 0
				&& lv_dropdown_get_selected(ui_MinuteDropdown) != 0)
		lv_obj_clear_state(ui_SaveClockBtn, LV_STATE_DISABLED);
	else
		lv_obj_add_state(ui_SaveClockBtn, LV_STATE_DISABLED);
}

static void AdjustClockMessageBoxEventCb(lv_event_t * e)
{
	// Close Message Box
	lv_msgbox_close(adjustClockMessageBox);
}

void AdjustClockMessageBox(void)
{
	// Reset DropDown Values and Save Button State
	lv_dropdown_set_selected(ui_DayDropdown, 0);
	lv_dropdown_set_selected(ui_MonthDropdown, 0);
	lv_dropdown_set_selected(ui_YearDropdown, 0);
	lv_dropdown_set_selected(ui_HourDropdown, 0);
	lv_dropdown_set_selected(ui_MinuteDropdown, 0);
	lv_obj_add_state(ui_SaveClockBtn, LV_STATE_DISABLED);

	static const char * btns[] = {"Close", ""};

	adjustClockMessageBox = lv_msgbox_create(NULL, NULL, "" LV_SYMBOL_OK " Datetime set successfully on RTC!", btns, false);
	lv_obj_add_event_cb(adjustClockMessageBox, AdjustClockMessageBoxEventCb, LV_EVENT_VALUE_CHANGED, NULL);
	lv_obj_center(adjustClockMessageBox);

	lv_obj_set_style_bg_color(lv_msgbox_get_btns(adjustClockMessageBox), lv_color_hex(0x2095F6), LV_PART_ITEMS | LV_STATE_DEFAULT);
	lv_obj_set_style_border_color(adjustClockMessageBox, lv_color_hex(0x2095F6), LV_PART_MAIN | LV_STATE_DEFAULT);
}

void AdjustRtc(lv_event_t * e)
{
	int day, month, year, hour, minute;
	char buf[25];

	lv_dropdown_get_selected_str(ui_DayDropdown, buf, 25);
	day = atoi(buf);

	lv_dropdown_get_selected_str(ui_MonthDropdown, buf, 25);
	month = atoi(buf);

	lv_dropdown_get_selected_str(ui_YearDropdown, buf, 25);
	year = atoi(buf);

	lv_dropdown_get_selected_str(ui_HourDropdown, buf, 25);
	hour = atoi(buf);

	lv_dropdown_get_selected_str(ui_MinuteDropdown, buf, 25);
	minute = atoi(buf);

	DateTime dateToSet = DateTime(year, month, day, hour, minute, 0);

	// If all DateTime Values are set and RTC is available
	if(lv_dropdown_get_selected(ui_DayDropdown) != 0 && lv_dropdown_get_selected(ui_MonthDropdown) != 0
			&& lv_dropdown_get_selected(ui_YearDropdown) != 0 && lv_dropdown_get_selected(ui_HourDropdown) != 0
				&& lv_dropdown_get_selected(ui_MinuteDropdown) != 0) {
		rtc.adjust(dateToSet);
		AdjustClockMessageBox();
	}
}

void ToggleShowRuntimeSeconds(lv_event_t * e)
{
	showRuntimeSeconds = lv_obj_has_state(ui_ShowRunTimeSecondsSwitch, true);
	EEPROM.write(1, showRuntimeSeconds);
	EEPROM.commit();
}

void TogglePressureHumidity(lv_event_t * e)
{
	showPressure = !showPressure;
	if (showPressure) {
		lv_label_set_text(ui_PressureLabel, "Pressure");
		lv_label_set_text(ui_PressureText, "----.- hPa");
	}	else {
		lv_label_set_text(ui_PressureLabel, "Humidity");
		lv_label_set_text(ui_PressureText, "--.- %");
	}
}

static void ResetRuntimeMessageBoxEventCb(lv_event_t * e)
{
	// If external RTC is available reset that else reset internal ESP32 RTC
	if (rtcInit) {
		startRunTime = rtc.now().unixtime();
	} else {
		startRunTime = esp32Rtc.getEpoch();
	}

	// Close Message Box
	lv_msgbox_close(resetRuntimeMessageBox);
}

void ResetRuntimeMessageBox(void)
{
	static const char * btns[] = {"Yes", ""};

	resetRuntimeMessageBox = lv_msgbox_create(NULL, "Confirm required", "" LV_SYMBOL_WARNING " Reset Run Time?", btns, true);
	lv_obj_add_event_cb(resetRuntimeMessageBox, ResetRuntimeMessageBoxEventCb, LV_EVENT_VALUE_CHANGED, NULL);
	lv_obj_center(resetRuntimeMessageBox);
	lv_obj_set_style_text_font(resetRuntimeMessageBox, &lv_font_montserrat_20, LV_PART_MAIN | LV_STATE_DEFAULT);
	lv_obj_set_style_bg_color(lv_msgbox_get_btns(resetRuntimeMessageBox), lv_color_hex(0xFFA500), LV_PART_ITEMS | LV_STATE_DEFAULT);
	lv_obj_set_size(lv_msgbox_get_btns(resetRuntimeMessageBox), 220, 50);
	lv_obj_set_style_border_color(resetRuntimeMessageBox, lv_color_hex(0xFFA500), LV_PART_MAIN | LV_STATE_DEFAULT);
}

void ResetRuntime(lv_event_t * e)
{
	ResetRuntimeMessageBox();
}

void AdjustIntTempValueChange(lv_event_t * e)
{
	char buf[10];
	lv_dropdown_get_selected_str(ui_AdjustInsideTempDropdown, buf, 10);
	insideTemperatureCorrection = atof(buf);
	EEPROM.writeFloat(10, insideTemperatureCorrection);
	EEPROM.commit();
}

void AdjustExtTempValueChange(lv_event_t * e)
{
	char buf[10];
	lv_dropdown_get_selected_str(ui_AdjustOutsideTempDropdown, buf, 10);
	outsideTemperatureCorrection = atof(buf);
	EEPROM.writeFloat(20, outsideTemperatureCorrection);
	EEPROM.commit();
}
